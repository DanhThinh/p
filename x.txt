/*
				Model

    private static int sma=100;
    private LocalDateTime time;

    public Object[] toObject() {
        return new Object[]{
            sv.getMa(), sv.getTenSV(), mh.getMa(), mh.getTenMH(), time.toString().split("\\.")[0]
        };
    }

//if(!sdt.matches("\\d{10}")) throw new DienThoaiException();

    public SinhVien( String tenSV, String diachi, String sdt) 
            throws TrongException, DienThoaiException1{
        if(tenSV.isEmpty()|| diachi.isEmpty())throw new TrongException(); 
        if(!sdt.matches("\\d+")) throw new DienThoaiException1();
        this.ma = sma++;
        ...
    }


                                          IOFile
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;

import java.util.logging.Logger;

public class IOFile {

    public static <T> List<T> doc(String file) {
        List<T> list = new ArrayList<>();
        try {
            ObjectInputStream o = new ObjectInputStream(new FileInputStream(file));
            list = (List<T>) o.readObject();
            o.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(IOFile.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException e) {
            System.out.println(e);
        } catch (IOException e) {
            System.out.println(e);
        }
        return list;
    }

    public static <T> void viet(String file, List<T> arr) {

        try {
            ObjectOutputStream o = new ObjectOutputStream(new FileOutputStream(file));
            o.writeObject(arr);
            o.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(IOFile.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException e) {
            System.out.println(e);
        }
    }
}
Main
import controller.*;
import java.io.File;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.*;                     

    DefaultTableModel tmA, tmB, tmBS;
    String fA, fB, fBS;
    List<SV> listA;
    List<MH> listB;
//    List<BS> listBS;

    public Main1() {
        initComponents();
        fA = "src/controller/SV.dat";
        fB = "src/controller/MH.dat";
        fBS = "src/controller/BD.dat";
        String[] tb1 = {"ma",};
        String[] tb2 = {"ma",};
        String[] tb3 = {};
        tmA = new DefaultTableModel(tb1, 0);
        tmB = new DefaultTableModel(tb2, 0);
//        tmBS = new DefaultTableModel(tb3, 0);
        jTable1.setModel(tmA);
        jTable2.setModel(tmB);
//        jTable3.setModel(tmBS);
        load1();
        load2();
//        load3();
        showtb1(listA);
        showtb2(listB);
//        showtb3(listBS);
        load2ma();
//    }

    private void load1() {
        File file = new File(fA);
        if (file.exists()) {
            listA = IOFile.doc(fA);
        } else {
            listA = new ArrayList<>();
        }
    }

    private void showtb1(List<SV> list) {
        tmA.setRowCount(0);
        for (SV i : list) {
            tmA.addRow(i.toObject());
        }
    }

    private void load2() {
        File file = new File(fB);
        if (file.exists()) {
            listB = IOFile.doc(fB);
        } else {
            listB = new ArrayList<>();
        }
    }

    private void showtb2(List<MH> list) {
        tmB.setRowCount(0);
        for (MH i : list) {
            tmB.addRow(i.toObject());
        }
    }
/*
    private void load3() {
        File file = new File(fBS);
        if (file.exists()) {
            listBS = IOFile.doc(fBS);
        } else {
            listBS = new ArrayList<>();
        }
    }

    private void showtb3(List<BD> list) {
        tmBS.setRowCount(0);
        for (BD i : list) {
            tmBS.addRow(i.toObject());
        }
    }

    private void load2ma() {
        jComboBox.removeAllItems();
        jComboBox.removeAllItems();
        fA = "src/controller/.dat";
        fB = "src/controller/.dat";
        List<> a1 = IOFile.doc(fA);
        for (MH i : a1) {
            jComboBox.addItem(i.getMa() + "");
        }
        List<> a2 = IOFile.doc(fB);
        for ( i : a2) {
            jComboBox.addItem(i.getMa() + "");
        }
    }
*/

                                                            Thêm

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int n = listA.size();
        if (n > 0) {
            SV.setSma(listA.get(n - 1).getMa() + 1);
        }
        jTextField1.setText(SV.getSma() + "");
        String ten, cn;
        LocalDate ns;
        try {
            ten = jTextField2.getText();
            ns = LocalDate.parse(jTextField3.getText());
            cn = jComboBox1.getSelectedItem().toString();
            SV mh = new SV(ten, cn, ns);
            tmA.addRow(mh.toObject());
            listA.add(mh);
        } catch (TrongException e) {
            JOptionPane.showMessageDialog(this, "Khong de trong!");
            return;
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(this, "Vui long nhap ngay sinh dung dinh dang: yyyy/mm/dd");
            return;
        }
    }                                        
                                            Lưu

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        IOFile.viet(fA, listA);
//        load2ma();
    }                                        
                                     
                                        Click table

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {                                     
        int r = jTable1.getSelectedRow();
        jTextField1.setText(jTable1.getValueAt(r, 0).toString());
        jTextField2.setText(jTable1.getValueAt(r, 1).toString());
        jTextField3.setText(jTable1.getValueAt(r, 2).toString());
        jComboBox1.setSelectedItem(jTable1.getValueAt(r, 3).toString());
    }                                    
                                        Sửa

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int r = jTable1.getSelectedRow();
        if (r >= 0 && r < jTable1.getRowCount()) {
            SV x = listA.get(r);
            try {
                String ten = jTextField2.getText();
                LocalDate ns = LocalDate.parse(jTextField3.getText());
                String cn = jComboBox1.getSelectedItem().toString();
                SV sv = new SV(ten, cn, ns);
                x.setHoten(sv.getHoten());
                x.set(sv.get);
                x.set(sv.get);
            } catch (TrongException e) {
                JOptionPane.showMessageDialog(this, "Khong de trong!");
                return;
            } catch (DateTimeParseException e) {
                JOptionPane.showMessageDialog(this, "Vui long nhap ngay sinh dung dinh dang: yyyy/mm/dd");
                return;
            }
            tmA.setValueAt(x.get, r, 1);
            tmA.setValueAt(x.get, r, 2);
            tmA.setValueAt(x.get, r, 3);
            listA.set(r, x);
        } else {
            JOptionPane.showMessageDialog(this, "Chon cai can sua!");
            return;
        }
    }                                        
		

                                            Xóa

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int r = jTable2.getSelectedRow();
        if (r >= 0 && r < jTable2.getRowCount()) {
            tmB.removeRow(r);
            listB.remove(r);
        } else {
            JOptionPane.showMessageDialog(this, "Chon cai can xoa!");
            return;
        }
    }   									

					Check trung 

    private boolean trung2ma(int maA, int maB) {
        for (BD i : listBS) {
            if (i.getMh().getMa() == maA && i.getSv().getMa() == maB) {
                return true;
            }
        }
        return false;
    }
					Dem 

    private int mondk(int masv) {
        int count = 0;
        for (DangKy i : listDK) {
            if (i.getSv().getMa() == masv) {
                count++;
            }
        }
        return count;
    }
				

    private SV getSVByMa(int id) {
        load1();
        for (SV ele : listA) {
            if (ele.getMa() == id) {
                return ele;
            }
        }
        return null;
    }

    private MH getMHByMa(int id) {
        load2();
        for (MH ele : listB) {
            if (ele.getMa() == id) {
                return ele;
            }
        }
        return null;
    }
						THêm bảng 3

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {  
	try {
            int diem;
            int maA = Integer.parseInt(jComboBox.getSelectedItem().toString());
            int maB = Integer.parseInt(jComboBox.getSelectedItem().toString());
            diem = Integer.parseInt(jTextField7.getText());
            if (trung2ma(maA, maB)) {
                JOptionPane.showMessageDialog(this, "Trung!");
                return;
            }
            BD dk = new BD(getSVByMa(maA), getMHByMa(maB), diem);//LocalDateTime.now());
            tmBS.addRow(dk.toObject());
            listBS.add(dk);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Dien so!");
            return;
        }
}                
                                      
                            //Sap xep: ten, thơi gian
    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        switch (jComboBox4.getSelectedIndex()) {
	    case 0: 
		break;
            case 1:
                listDK.sort(new Comparator<DK>() {
                    @Override
    		public int compare(DK o1, DangKy o2) {
                        return o1.getSv().getTenSV().compareTo( o2.getSv().getTenSV());
                    }
                });
                break;
            case 2:
                listDK.sort(new Comparator<DK>() {
                    @Override
		public int compare(DK o1, DK o2) {
                        if (o1.getTime().isAfter(o2.getTime())) {
                            return 1;
                        }
                        return -1;
                    }
                });
                break;
        }
        tmDK.setRowCount(0);
        for (DK ele : listDK) {
            tmDK.addRow(ele.toObject());
        }

    }                                          


//LocalDate ngay = LocalDate.parse(jTextField8.getText());
catch(DateTimeParseException e){
    JOptionPane.showMessageDialog(this, "Vui long nhap dung dinh dang ngay: yyyy-mm-dd!");
    return;
                }
			Sắp xếp theo họ và tên 

String[] t1 = o1.getL().getTen().split("\\s+");
String[] t2 = o2.getL().getTen().split("\\s+");
String ten1 = t1[t1.length-1]+o1.getL().getTen();
String ten2 = t2[t2.length-1]+o2.getL().getTen();
return ten1.compareToIgnoreCase(ten2);

			SX theo số lượng
   return Integer.compare(o1.getKip(), o2.getKip()); // so sánh interger


if (jRadioButton1.isSelected()) {
            listBS.sort(new Comparator<BS>() {
                @Override
                public int compare(BS o1, BS o2) {
                    return o1.getSv().getHoten().compareTo(o2.getSv().getHoten());
                }
            });
        } else if (jRadioButton2.isSelected()) {
            listBS.sort(new Comparator<BS>() {
                @Override
                public int compare(BS o1, BS o2) {
                    return Integer.compare(o1.getDiem(), o2.getDiem()); // so sánh interger
                }
            });
        }
        tmBS.setRowCount(0);
        for (BD ele : listBS) {
            tmBS.addRow(ele.toObject());
        }


/*